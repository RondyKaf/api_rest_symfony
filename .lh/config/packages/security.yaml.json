{
    "sourceFile": "config/packages/security.yaml",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1688549730072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1688549752047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n     password_hashers:\n         Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface: 'auto'\n     # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider\n \n-    \n+    enable_authenticator_manager: true\n+\n     providers:\n         # used to reload user from session & other features (e.g. switch_user)\n         app_user_provider:\n             entity:\n@@ -14,11 +15,11 @@\n     firewalls:\n         dev:\n             pattern: ^/(_(profiler|wdt)|css|images|js)/\n             security: false\n-        main:\n-            lazy: true\n-            provider: app_user_provider\n+        # main:\n+        #     lazy: true\n+        #     provider: app_user_provider\n \n             # activate different ways to authenticate\n             # https://symfony.com/doc/current/security.html#the-firewall\n \n"
                },
                {
                    "date": 1688549760465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,21 @@\n     firewalls:\n         dev:\n             pattern: ^/(_(profiler|wdt)|css|images|js)/\n             security: false\n+        \n+        login:\n+            pattern: ^/api/login\n+            stateless: true\n+            json_login:\n+                check_path: /api/login_check\n+                success_handler: lexik_jwt_authentication.handler.authentication_success\n+                failure_handler: lexik_jwt_authentication.handler.authentication_failure\n+\n+        api:\n+            pattern:   ^/api\n+            stateless: true\n+            jwt: ~\n         # main:\n         #     lazy: true\n         #     provider: app_user_provider\n \n"
                },
                {
                    "date": 1688549816973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,10 +41,10 @@\n \n     # Easy way to control access for large sections of your site\n     # Note: Only the *first* access control that matches will be used\n     access_control:\n-        # - { path: ^/admin, roles: ROLE_ADMIN }\n-        # - { path: ^/profile, roles: ROLE_USER }\n+    - { path: ^/api/login, roles: PUBLIC_ACCESS }\n+    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }\n \n when@test:\n     security:\n         password_hashers:\n"
                },
                {
                    "date": 1688549932629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n security:\n     # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords\n     password_hashers:\n-        Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface: 'auto'\n+        Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface: \"auto\"\n     # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider\n \n     enable_authenticator_manager: true\n \n@@ -15,9 +15,9 @@\n     firewalls:\n         dev:\n             pattern: ^/(_(profiler|wdt)|css|images|js)/\n             security: false\n-        \n+\n         login:\n             pattern: ^/api/login\n             stateless: true\n             json_login:\n@@ -25,35 +25,35 @@\n                 success_handler: lexik_jwt_authentication.handler.authentication_success\n                 failure_handler: lexik_jwt_authentication.handler.authentication_failure\n \n         api:\n-            pattern:   ^/api\n+            pattern: ^/api\n             stateless: true\n             jwt: ~\n         # main:\n         #     lazy: true\n         #     provider: app_user_provider\n \n-            # activate different ways to authenticate\n-            # https://symfony.com/doc/current/security.html#the-firewall\n+        # activate different ways to authenticate\n+        # https://symfony.com/doc/current/security.html#the-firewall\n \n-            # https://symfony.com/doc/current/security/impersonating_user.html\n-            # switch_user: true\n+        # https://symfony.com/doc/current/security/impersonating_user.html\n+        # switch_user: true\n \n     # Easy way to control access for large sections of your site\n     # Note: Only the *first* access control that matches will be used\n     access_control:\n-    - { path: ^/api/login, roles: PUBLIC_ACCESS }\n-    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }\n+        - { path: ^/api/login, roles: PUBLIC_ACCESS }\n+        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }\n \n-when@test:\n-    security:\n-        password_hashers:\n-            # By default, password hashers are resource intensive and take time. This is\n-            # important to generate secure password hashes. In tests however, secure hashes\n-            # are not important, waste resources and increase test times. The following\n-            # reduces the work factor to the lowest possible values.\n-            Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface:\n-                algorithm: auto\n-                cost: 4 # Lowest possible value for bcrypt\n-                time_cost: 3 # Lowest possible value for argon\n-                memory_cost: 10 # Lowest possible value for argon\n+# when@test:\n+#     security:\n+#         password_hashers:\n+#             # By default, password hashers are resource intensive and take time. This is\n+#             # important to generate secure password hashes. In tests however, secure hashes\n+#             # are not important, waste resources and increase test times. The following\n+#             # reduces the work factor to the lowest possible values.\n+#             ? Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface\n+#             : algorithm: auto\n+#               cost: 4 # Lowest possible value for bcrypt\n+#               time_cost: 3 # Lowest possible value for argon\n+#               memory_cost: 10 # Lowest possible value for argon\n"
                },
                {
                    "date": 1688763707909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n     # Easy way to control access for large sections of your site\n     # Note: Only the *first* access control that matches will be used\n     access_control:\n         - { path: ^/api/login, roles: PUBLIC_ACCESS }\n+        - { path: ^/api/login, roles: PUBLIC_ACCESS }\n         - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }\n-\n # when@test:\n #     security:\n #         password_hashers:\n #             # By default, password hashers are resource intensive and take time. This is\n"
                }
            ],
            "date": 1688549730072,
            "name": "Commit-0",
            "content": "security:\n    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords\n    password_hashers:\n        Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface: 'auto'\n    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider\n\n    \n    providers:\n        # used to reload user from session & other features (e.g. switch_user)\n        app_user_provider:\n            entity:\n                class: App\\Entity\\User\n                property: email\n    firewalls:\n        dev:\n            pattern: ^/(_(profiler|wdt)|css|images|js)/\n            security: false\n        main:\n            lazy: true\n            provider: app_user_provider\n\n            # activate different ways to authenticate\n            # https://symfony.com/doc/current/security.html#the-firewall\n\n            # https://symfony.com/doc/current/security/impersonating_user.html\n            # switch_user: true\n\n    # Easy way to control access for large sections of your site\n    # Note: Only the *first* access control that matches will be used\n    access_control:\n        # - { path: ^/admin, roles: ROLE_ADMIN }\n        # - { path: ^/profile, roles: ROLE_USER }\n\nwhen@test:\n    security:\n        password_hashers:\n            # By default, password hashers are resource intensive and take time. This is\n            # important to generate secure password hashes. In tests however, secure hashes\n            # are not important, waste resources and increase test times. The following\n            # reduces the work factor to the lowest possible values.\n            Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface:\n                algorithm: auto\n                cost: 4 # Lowest possible value for bcrypt\n                time_cost: 3 # Lowest possible value for argon\n                memory_cost: 10 # Lowest possible value for argon\n"
        }
    ]
}